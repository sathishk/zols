/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.zols.datastore.elasticsearch;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.elasticsearch.action.admin.indices.create.CreateIndexRequest;
import org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest;
import org.elasticsearch.action.admin.indices.exists.indices.IndicesExistsRequest;
import org.elasticsearch.action.admin.indices.refresh.RefreshRequest;
import org.elasticsearch.action.delete.DeleteResponse;
import org.elasticsearch.action.get.GetResponse;
import org.elasticsearch.action.index.IndexRequestBuilder;
import org.elasticsearch.action.index.IndexResponse;
import org.elasticsearch.action.search.SearchRequestBuilder;
import org.elasticsearch.action.search.SearchResponse;
import org.elasticsearch.action.search.SearchType;
import org.elasticsearch.action.update.UpdateRequest;
import org.elasticsearch.action.update.UpdateResponse;
import org.elasticsearch.client.Client;
import org.elasticsearch.common.settings.Settings;
import static org.elasticsearch.common.settings.Settings.settingsBuilder;
import org.elasticsearch.common.unit.TimeValue;
import org.elasticsearch.index.query.BoolQueryBuilder;
import org.elasticsearch.index.query.QueryBuilder;
import org.elasticsearch.index.query.QueryBuilders;
import static org.elasticsearch.node.NodeBuilder.nodeBuilder;
import org.elasticsearch.search.SearchHit;
import org.elasticsearch.search.aggregations.AggregationBuilders;

import static org.slf4j.LoggerFactory.getLogger;
import org.zols.datastore.persistence.BrowsableDataStorePersistence;
import org.zols.datastore.query.AggregatedResults;
import org.zols.datastore.query.Page;
import org.zols.datastore.query.Filter;
import static org.zols.datastore.query.Filter.Operator.EQUALS;
import org.zols.datastore.query.Query;
import static org.zols.datastore.util.JsonUtil.asMap;
import org.zols.datatore.exception.DataStoreException;
import org.zols.jsonschema.JsonSchema;

/**
 *
 * Elastic Search Implementation of DataStore
 *
 */
public class ElasticSearchDataStorePersistence implements BrowsableDataStorePersistence {

    private static final org.slf4j.Logger LOGGER = getLogger(ElasticSearchDataStorePersistence.class);

    private final Client client;

    private final String indexName;

    public ElasticSearchDataStorePersistence() {
        this("zols", null);
    }

    public ElasticSearchDataStorePersistence(String indexName) {
        this(indexName, null);
    }

    public ElasticSearchDataStorePersistence(String indexName, Client client) {
        this.indexName = indexName;
        if (client == null) {
            Settings settings = settingsBuilder()
                    .put("path.home", "/")
                    .put("path.data", "data")
                    .put("index.number_of_replicas", 0).build();
            this.client = nodeBuilder().settings(settings).local(true).build().start().client();
        } else {
            this.client = client;
        }

        createIndexIfNotExists();
    }

    private void createIndexIfNotExists() {
        IndicesExistsRequest indicesExistsRequest = new IndicesExistsRequest(indexName);
        if (!client.admin().indices().exists(indicesExistsRequest).actionGet().isExists()) {
            CreateIndexRequest createIndexRequest = new CreateIndexRequest(indexName);
            client.admin().indices().create(createIndexRequest).actionGet();
            LOGGER.debug("New index [{}] created", indexName);
        }
    }

    @Override
    public Map<String, Object> create(JsonSchema jsonSchema, Map<String, Object> validatedDataObject) {
        LOGGER.debug("Create Data for ", getTypeName(jsonSchema));
        Object idValue = getIdValue(jsonSchema, validatedDataObject);
        IndexRequestBuilder indexRequestBuilder;
        if (idValue == null) {
            indexRequestBuilder = client.prepareIndex(indexName, getTypeName(jsonSchema)).setRefresh(true);
        } else {
            indexRequestBuilder = client.prepareIndex(indexName, getTypeName(jsonSchema), idValue.toString()).setRefresh(true);
        }

        IndexResponse response = indexRequestBuilder
                .setSource(validatedDataObject)
                .execute()
                .actionGet();

        Map<String, Object> createdData = null;

        if (response.isCreated()) {
            createdData = read(jsonSchema, response.getId());
            //If autogenerated if then update idField
            if (idValue == null) {
                createdData.put(jsonSchema.getIdPropertyNames().get(0), response.getId());
                updatePartially(jsonSchema, createdData);
            }
        }

        return createdData;

    }

    @Override
    public Map<String, Object> read(JsonSchema jsonSchema, String idValue) {
        GetResponse getResponse = client
                .prepareGet(indexName, getTypeName(jsonSchema), idValue)
                .execute()
                .actionGet();

        return getResponse.getSource();
    }

    @Override
    public boolean delete(JsonSchema jsonSchema, String idValue) {
        DeleteResponse response = client
                .prepareDelete(indexName, getTypeName(jsonSchema), idValue).setRefresh(true)
                .execute()
                .actionGet();
        client.admin().indices().refresh(new RefreshRequest(indexName));

        return response.isFound();
    }

    @Override
    public boolean delete(JsonSchema jsonSchema, Query query) {
        SearchResponse response = client
                .prepareSearch()
                .setSearchType(SearchType.SCAN)
                .setIndices(indexName)
                .setTypes(getTypeName(jsonSchema))
                .setQuery(getQueryBuilder(query))
                .setScroll(new TimeValue(60000))
                .setSize(100)
                .execute()
                .actionGet();
        while (true) {
            response = client.prepareSearchScroll(response.getScrollId()).setScroll(new TimeValue(600000)).execute().actionGet();
            boolean hitsRead = false;
            for (SearchHit hit : response.getHits()) {
                hitsRead = true;
                client
                        .prepareDelete(indexName, hit.getType(), hit.getId()).setRefresh(true)
                        .execute()
                        .actionGet();
            }
            //Break condition: No hits are returned
            if (!hitsRead) {
                break;
            }
        }
        return true;
    }

    @Override
    public boolean update(JsonSchema jsonSchema, String idValue, Map<String, Object> validatedDataObject) {
        IndexResponse response = client.prepareIndex(indexName, getTypeName(jsonSchema), idValue).setRefresh(true)
                .setSource(validatedDataObject)
                .execute()
                .actionGet();
        client.admin().indices().refresh(new RefreshRequest(indexName));

        return true;
    }

    @Override
    public boolean updatePartially(JsonSchema jsonSchema, Map<String, Object> validatedDataObject) {
        String idValue = getIdValue(jsonSchema, validatedDataObject).toString();

        UpdateRequest updateRequest = new UpdateRequest(indexName, getTypeName(jsonSchema), idValue)
                .doc(validatedDataObject);

        UpdateResponse response;
        try {
            response = client.update(updateRequest).get();
            client.admin().indices().refresh(new RefreshRequest(indexName));
            return true;
        } catch (InterruptedException | ExecutionException ex) {
            Logger.getLogger(ElasticSearchDataStorePersistence.class.getName()).log(Level.SEVERE, null, ex);
        }

        return false;
    }

    @Override
    public Page<Map<String, Object>> list(JsonSchema jsonSchema,
            Query query, Integer pageNumber, Integer pageSize) {
        Page<Map<String, Object>> page = null;
        SearchRequestBuilder builder = client
                .prepareSearch()
                .setIndices(indexName)
                .setTypes(getTypeName(jsonSchema))
                .setQuery(getQueryBuilder(query));
        if (pageNumber != null) {
            builder.setSize(pageSize)
                    .setFrom(pageNumber * pageSize);
        }
        SearchResponse response = builder
                .execute()
                .actionGet();
        long totalHits = response.getHits().getTotalHits();
        if (totalHits != 0) {
            List<Map<String, Object>> list = new ArrayList<>((int) totalHits);
            for (SearchHit hit : response.getHits()) {
                list.add(hit.getSource());
            }
            page = new Page(pageNumber, pageSize, totalHits, list);
        }
        return page;
    }

    @Override
    public List<Map<String, Object>> list(JsonSchema jsonSchema, Query query) {
        List<Map<String, Object>> list = null;
        SearchResponse response = client
                .prepareSearch()
                .setSearchType(SearchType.SCAN)
                .setIndices(indexName)
                .setTypes(getTypeName(jsonSchema))
                .setQuery(getQueryBuilder(query))
                .setScroll(new TimeValue(60000))
                .setSize(100)
                .execute()
                .actionGet();
        long totalHits = response.getHits().getTotalHits();
        if (totalHits != 0) {
            list = new ArrayList<>((int) totalHits);
            while (true) {
                response = client.prepareSearchScroll(response.getScrollId()).setScroll(new TimeValue(600000)).execute().actionGet();
                boolean hitsRead = false;
                for (SearchHit hit : response.getHits()) {
                    hitsRead = true;
                    list.add(hit.getSource());
                }
                //Break condition: No hits are returned
                if (!hitsRead) {
                    break;
                }
            }
        }
        return list;
    }

    @Override
    public void drop() throws DataStoreException {
        client.admin().indices().delete(new DeleteIndexRequest(indexName));
    }

    public static QueryBuilder getQueryBuilder(Query query) {
        BoolQueryBuilder queryBuilder = null;
        if (query != null) {
            queryBuilder = QueryBuilders.boolQuery();
            List<Filter> queries = query.getFilters();
            if (queries != null) {
                int size = queries.size();
                Filter filter;
                Collection collection;
                BoolQueryBuilder boolQuery;
                for (int index = 0; index < size; index++) {
                    filter = queries.get(index);
                    switch (filter.getOperator()) {
                        case FULL_TEXT_SEARCH:
                            queryBuilder.must(QueryBuilders.queryStringQuery(filter.getValue().toString()));
                            break;
                        case EQUALS:
                            queryBuilder.must(QueryBuilders.matchQuery(filter.getName(), filter.getValue()));
                            break;
                        case NOT_EQUALS:
                            queryBuilder.mustNot(QueryBuilders.matchQuery(filter.getName(), filter.getValue()));
                            break;
                        case IS_NULL:
                            queryBuilder.must(QueryBuilders.missingQuery(filter.getName()));
                            break;
                        case IS_NOTNULL:
                            queryBuilder.must(QueryBuilders.existsQuery(filter.getName()));
                            break;
                        case EXISTS_IN:
                            boolQuery = QueryBuilders.boolQuery();
                            collection = (Collection) filter.getValue();
                            for (Object object : collection) {
                                boolQuery.should(QueryBuilders.matchQuery(filter.getName(), object));
                            }
                            queryBuilder.must(boolQuery);
                            break;
                        case NOT_EXISTS_IN:
                            boolQuery = QueryBuilders.boolQuery();
                            collection = (Collection) filter.getValue();
                            for (Object object : collection) {
                                boolQuery.should(QueryBuilders.matchQuery(filter.getName(), object));
                            }
                            queryBuilder.mustNot(boolQuery);
                            break;
                        case IN_BETWEEN:
                            Object[] rangeValues = (Object[]) filter.getValue();
                            queryBuilder.must(QueryBuilders.rangeQuery(filter.getName())
                                    .from(rangeValues[0])
                                    .to(rangeValues[1]));
                            break;
                    }
                }
            }
            
        }

        return queryBuilder;
    }

    private String getTypeName(JsonSchema jsonSchema) {
        return jsonSchema.getJSONPropertyName(jsonSchema.getRoot().getId());
    }

    private Object getIdValue(JsonSchema jsonSchema, Map<String, Object> validatedDataObject) {
        return jsonSchema == null ? null : jsonSchema.getIdValues(validatedDataObject)[0];
    }

    @Override
    public AggregatedResults browse(JsonSchema schema, String keyword, Query query, Integer pageNumber, Integer pageSize) throws DataStoreException {
        AggregatedResults aggregatedResults = null;
        if (schema != null) {
            if (keyword != null) {
                query.addFilter(new Filter(Filter.Operator.FULL_TEXT_SEARCH, keyword + "*"));
            }
            Map<String, Object> searchResponse = searchResponse(schema, query, pageNumber, pageSize);
            Page<Map<String, Object>> resultsOf = pageOf(searchResponse, pageNumber, pageSize);
            if (resultsOf != null) {
                aggregatedResults = new AggregatedResults();
                aggregatedResults.setPage(resultsOf);
                aggregatedResults.setBuckets(bucketsOf(searchResponse));
            }
        }
        return aggregatedResults;
    }

    private List<Map<String, Object>> bucketsOf(Map<String, Object> searchResponse) {
        List<Map<String, Object>> buckets = null;
        if (searchResponse != null) {
            Map<String, Object> aggregations = (Map<String, Object>) searchResponse.get("aggregations");
            if (aggregations != null) {
                Map<String, Object> bucket;
                Map<String, Object> bucketItem;
                List<Map<String, Object>> bucketItems;
                List<Map<String, Object>> bucketsMaps;

                buckets = new ArrayList<>();
                String aggregationName;
                for (Map.Entry<String, Object> entrySet : aggregations.entrySet()) {

                    aggregationName = entrySet.getKey();
                    if (!aggregationName.startsWith("max_")) {
                        bucket = new HashMap<>();
                        if (aggregationName.startsWith("min_")) {
                            bucket.put("name", aggregationName.replaceAll("min_", ""));
                            bucket.put("type", "minmax");
                            bucketItem = new HashMap<>();
                            bucketItem.put("min", ((Map<String, Object>) aggregations.get(aggregationName)).get("value"));
                            bucketItem.put("max", ((Map<String, Object>) aggregations.get(aggregationName.replaceAll("min_", "max_"))).get("value"));
                            bucket.put("title", ((Map<String, Object>) ((Map<String, Object>) aggregations.get(aggregationName)).get("meta")).get("title"));
                            bucket.put("item", bucketItem);
                        } else if (!aggregationName.startsWith("max_")) {
                            bucket.put("name", aggregationName);
                            bucket.put("type", "term");
                            bucketsMaps = (List<Map<String, Object>>) ((Map<String, Object>) entrySet.getValue()).get("buckets");
                            bucketItems = new ArrayList<>();
                            for (Map<String, Object> bucketsMap : bucketsMaps) {
                                bucketItem = new HashMap<>();
                                bucketItem.put("name", bucketsMap.get("key").toString());
                                bucketItem.put("label", bucketsMap.get("key").toString());
                                bucketItem.put("count", (Integer) bucketsMap.get("doc_count"));
                                bucketItems.add(bucketItem);
                            }
                            bucket.put("title", ((Map<String, Object>) ((Map<String, Object>) aggregations.get(aggregationName)).get("meta")).get("title"));

                            bucket.put("items", bucketItems);
                        }
                        buckets.add(bucket);
                    }

                }

            }
        }
        return buckets;
    }

    private Page<Map<String, Object>> pageOf(Map<String, Object> searchResponse, Integer pageNumber,
            Integer pageSize) {
        Page<Map<String, Object>> page = null;
        List<Map<String, Object>> list = resultsOf(searchResponse);
        if (list != null) {
            Long noOfRecords = new Long(((Map<String, Object>) searchResponse.get("hits")).get("total").toString());
            page = new Page(pageNumber, pageSize, noOfRecords, list);
        }
        return page;
    }

    private List<Map<String, Object>> resultsOf(Map<String, Object> searchResponse) {
        List<Map<String, Object>> list = null;
        if (searchResponse != null) {
            Integer noOfRecords = (Integer) ((Map<String, Object>) searchResponse.get("hits")).get("total");
            if (0 != noOfRecords) {
                List<Map<String, Object>> recordsMapList = (List<Map<String, Object>>) ((Map<String, Object>) searchResponse.get("hits")).get("hits");
                list = new ArrayList<>(recordsMapList.size());
                for (Map<String, Object> recordsMapList1 : recordsMapList) {
                    list.add((Map<String, Object>) recordsMapList1.get("_source"));
                }
            }
        }
        return list;
    }

    private void addAggregations(JsonSchema jsonSchema,
            SearchRequestBuilder searchRequestBuilder) {
        HashMap<String, Object> map = new HashMap<>();
        map.put("title", "Types");
        searchRequestBuilder.addAggregation(AggregationBuilders.terms("types").setMetaData(map).field("$type"));
        jsonSchema.getProperties().entrySet().parallelStream().forEach(entry -> {
            String filter = (String) entry.getValue().get("filter");
            if (filter != null) {
                String title = entry.getKey();
                if (entry.getValue().get("title") != null) {
                    title = entry.getValue().get("title").toString();
                }
                switch (filter) {
                    case "minmax":
                        searchRequestBuilder
                                .addAggregation(AggregationBuilders.min("min_" + entry.getKey()).setMetaData(entry.getValue()).field(entry.getKey()))
                                .addAggregation(AggregationBuilders.max("max_" + entry.getKey()).setMetaData(entry.getValue()).field(entry.getKey()));
                        break;
                    case "term":
                        searchRequestBuilder
                                .addAggregation(AggregationBuilders.terms(entry.getKey()).setMetaData(entry.getValue()).field(entry.getKey()));

                        break;
                }
            }

        });

    }

    public Map<String, Object> searchResponse(JsonSchema jsonSchema,
            Query query, Integer pageNumber, Integer pageSize) {

        SearchRequestBuilder searchRequestBuilder = client.prepareSearch(indexName)
                .setTypes(jsonSchema.getJSONPropertyName(jsonSchema.getRoot().getId()));

        if (pageNumber != null) {
            searchRequestBuilder.setSize(pageSize)
                    .setFrom(pageNumber * pageSize);
        }
        
        searchRequestBuilder.setQuery(getQueryBuilder(query));

        

        addAggregations(jsonSchema, searchRequestBuilder);
        
        LOGGER.debug("Executing elastic search query {}", searchRequestBuilder.toString());

        SearchResponse response = searchRequestBuilder
                .execute()
                .actionGet();

        return asMap(response.toString());
    }

}
